pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract MyContract {
    using SafeMath for uint256;

    uint256 public myNumber;

    function add(uint256 _value) public {
        myNumber = myNumber.add(_value);
    }
}
import "./SafeMath.sol";
contract KittyCoin {
  // your code here
event Transfer(address indexed from, address indexed to, uint256 value);
    // rest of the code
}
import "./SafeMath.sol";
pragma solidity ^0.8.0;

contract KittyCoin {
    uint256 myNumber;
}
    using SafeMath for uint256;
    uint256 myNumber;

function getMyNumber() public view returns (uint256) {
    return myNumber;
}
    contract KittyCoin {
    uint256 public number;

    constructor(uint256 _number) {
        number = _number;
    }

    function addNumber(uint256 _numberToAdd) public {
        myNumber = myNumber.add(_numberToAdd);
    }

    function substractNumber(uint256 _numberToSubstract) public {
        myNumber = myNumber.sub(_numberToSubstract);
    }
}
    struct MintParams {
        address token0;
        address token1;
        uint24 fee;
        int24 tickLower;
        int24 tickUpper;
        uint256 amount0Desired;
        uint256 amount1Desired;
        uint256 amount0Min;
        uint256 amount1Min;
        address recipient;
        uint256 deadline;
    }
    function mint(MintParams calldata params) external payable returns (
        uint256 tokenId,
        uint128 liquidity,
        uint256 amount0,
        uint256 amount1
    );
    function createAndInitializePoolIfNecessary(
        address token0,
        address token1,
        uint24 fee,
        uint160 sqrtPriceX96
    ) external payable returns (address pool);

contract Meme is ERC20 {
    INonfungiblePositionManager posMan = INonfungiblePositionManager(0xC36442b4a4522E871399CD717aBDD847Ab11FE88);
    address constant weth = 0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889; // polygon mumbai testnet
    //address constant weth = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270; // Polygon wMatic
    uint supply = 1_000_000 * 10 ** decimals();
    uint24 constant fee = 10;
    uint160 constant sqrtPriceX96 = 79228162514264337593543950336; // ~ 1:1
    int24 minTick;
    int24 maxTick;
    address public pool;
    address token0;
    address token1;
    uint amount0Desired;
    uint amount1Desired;
    
    constructor() ERC20("Meme Token", "MEME") {
        _mint(address(this), supply);
        fixOrdering();
        pool = posMan.createAndInitializePoolIfNecessary(token0, token1, fee, sqrtPriceX96);
    }

    function addLiquidity() public {
        IERC20(address(this)).approve(address(posMan), supply);
        posMan.mint(INonfungiblePositionManager.MintParams({
            token0: token0,
            token1: token1,
            fee: fee,
            tickLower: minTick,
            tickUpper: maxTick,
            amount0Desired: amount0Desired,
            amount1Desired: amount1Desired,
            amount0Min: 0,
            amount1Min: 0,
            recipient: address(this),
            deadline: block.timestamp + 1200
        }));
    }

    function fixOrdering() private {
        if (address(this) < weth) {
            token0 = address(this);
            token1 = weth;
            amount0Desired = supply;
            amount1Desired = 0;
            minTick = 0;
            maxTick = 887270;
        } else {
            token0 = weth;
            token1 = address(this);
            amount0Desired = 0;
            amount1Desired = supply;
            minTick = -887270;
            maxTick = 0;
        }
    }

}library SafeMath {}
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;

        return c;
    }import "./SafeMath.sol";

   string name = "KittyKitCoin";

   string symbol = "KITTY";
   uint256 totalSupply = 1000000000000000000000000; // 1 billion tokens
   uint8 decimals = 18;
   address owner;
   mapping(address => uint256) balanceOf;
pragma solidity ^0.8.0;

contract KittyCoin {
    event Transfer(address indexed from, address indexed to, uint256 value);
    // rest of the code
   event Transfer(address indexed from, address indexed to, uint256 value);

   event Burn(address indexed from, uint256 value);
   event Mint(address indexed to, uint256 value);

   constructor() {
      owner = msg.sender;
      balanceOf[msg.sender] = totalSupply;
   }

   function transfer(address _to, uint256 _value) public returns (bool success) {
      require(_to != address(0));
      require(balanceOf[msg.sender] >= _value && _value > 0);

      uint256 previousSenderBalance = balanceOf[msg.sender];
      uint256 previousReceiverBalance = balanceOf[_to];

      balanceOf[msg.sender] = SafeMath.sub(previousSenderBalance, _value);
      balanceOf[_to] = SafeMath.add(previousReceiverBalance, _value);

      emit Transfer(msg.sender, _to, _value);
      return true;
   }

   function burn(uint256 _value) public returns (bool success) {
      require(balanceOf[msg.sender] >= _value && _value > 0);

      balanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender], _value);
      totalSupply = SafeMath.sub(totalSupply, _value);

      emit Burn(msg.sender, _value);
      return true;
   }

   function mint(address _to, uint256 _value) public returns (bool success) {
      require(_to != address(0));

      balanceOf[_to] = SafeMath.add(balanceOf[_to], _value);
      totalSupply = SafeMath.add(totalSupply, _value);

      emit Mint(_to, _value);
      emit Transfer(address(0), _to, _value);
      return true;
   }
}